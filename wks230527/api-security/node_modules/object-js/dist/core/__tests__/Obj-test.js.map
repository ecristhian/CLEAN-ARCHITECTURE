{"version":3,"sources":["core/__tests__/Obj-test.js"],"names":[],"mappings":";;AAAA;;AACA;;;;;;AAGA,SAAS,KAAT,EAAgB,YAAW;AACzB,WAAS,eAAT,EAA0B,YAAW;AACnC,OAAG,wBAAH,EAA6B,YAAW;AACtC,UAAM,aAAa,mBAAnB;AACA,wBAAO,WAAW,aAAX,EAAP,EAAmC,EAAnC,CAAsC,KAAtC;AACD,KAHD;AAIA,OAAG,kDAAH,EAAuD,YAAW;AAChE,UAAM,cAAc,mBAApB;AACA,UAAM,cAAc,mBAApB;AACA,wBAAO,YAAY,aAAZ,EAAP,EAAoC,EAApC,CAAuC,KAAvC;AACA,wBAAO,YAAY,aAAZ,EAAP,EAAoC,EAApC,CAAuC,KAAvC;AACA,wBAAO,YAAY,aAAZ,EAAP,EAAoC,GAApC,CAAwC,EAAxC,CAA2C,KAA3C,CAAiD,YAAY,aAAZ,EAAjD;AACD,KAND;AAOD,GAZD;;AAcA,WAAS,UAAT,EAAqB,YAAW;AAC9B,OAAG,4BAAH,EAAiC,YAAW;AAC1C,UAAM,aAAa,mBAAnB;AACA,wBAAO,WAAW,QAAX,EAAP,EAA8B,EAA9B,CAAiC,EAAjC,CAAoC,CAApC,CAAsC,QAAtC;AACD,KAHD;AAIA,OAAG,sCAAH,EAA2C,YAAW;AACpD,UAAM,aAAa,mBAAnB;AACA,UAAM,QAAQ,WAAW,QAAX,EAAd;AACA,UAAM,SAAS,WAAW,QAAX,EAAf;AACA,wBAAO,KAAP,EAAc,EAAd,CAAiB,KAAjB,CAAuB,MAAvB;AACD,KALD;AAMD,GAXD;;AAaA,WAAS,QAAT,EAAmB,YAAW;AAC5B,OAAG,iCAAH,EAAsC,YAAW;AAC/C,UAAM,aAAa,mBAAnB;AACA,wBAAO,WAAW,MAAX,CAAkB,UAAlB,CAAP,EAAsC,EAAtC,CAAyC,EAAzC,CAA4C,IAA5C;AACD,KAHD;AAIA,OAAG,wCAAH,EAA6C,YAAW;AACtD,UAAM,cAAc,mBAApB;AACA,UAAM,cAAc,mBAApB;AACA,wBAAO,YAAY,MAAZ,CAAmB,WAAnB,CAAP,EAAwC,EAAxC,CAA2C,EAA3C,CAA8C,KAA9C;AACD,KAJD;AAKD,GAVD;AAWD,CAvCD","file":"core/__tests__/Obj-test.js","sourcesContent":["import { expect } from 'chai';\nimport Obj from '../Obj';\n\n\ndescribe('Obj', function() {\n  describe('instantiation', function() {\n    it('Defines an internal id', function() {\n      const testObject = new Obj();\n      expect(testObject.getInternalId()).to.exist;\n    });\n    it('Defines different internal ids for each instance', function() {\n      const testObject1 = new Obj();\n      const testObject2 = new Obj();\n      expect(testObject1.getInternalId()).to.exist;\n      expect(testObject2.getInternalId()).to.exist;\n      expect(testObject1.getInternalId()).not.to.equal(testObject2.getInternalId());\n    });\n  });\n\n  describe('hashCode', function() {\n    it('Returns a numeric hashCode', function() {\n      const testObject = new Obj();\n      expect(testObject.hashCode()).to.be.a('number');\n    });\n    it('Returns same hashCode on second call', function() {\n      const testObject = new Obj();\n      const first = testObject.hashCode();\n      const second = testObject.hashCode();\n      expect(first).to.equal(second);\n    });\n  });\n\n  describe('equals', function() {\n    it('returns true on self comparison', function() {\n      const testObject = new Obj();\n      expect(testObject.equals(testObject)).to.be.true;\n    });\n    it('two instances are not equal by default', function() {\n      const testObject1 = new Obj();\n      const testObject2 = new Obj();\n      expect(testObject1.equals(testObject2)).to.be.false;\n    });\n  });\n});\n//\n// /**\n//  * This tests\n//  * 1) The static equals method of the Obj class\n//  */\n// var objEqualsTest = {\n//\n//     // Setup Test\n//     //-------------------------------------------------------------------------------\n//\n//     setup: function() {\n//         this.testObject1 = new Obj();\n//         this.testObject2 = new Obj();\n//     },\n//\n//\n//     // Run Test\n//     //-------------------------------------------------------------------------------\n//\n//     test: function(test) {\n//         var time = (new Date()).getTime();\n//         test.assertTrue(Obj.equals(\"value1\", \"value1\"),\n//             \"Assert equals returns true for two matching strings\");\n//         test.assertTrue(Obj.equals(123, 123),\n//             \"Assert equals returns true for two matching numbers\");\n//         test.assertTrue(Obj.equals(0, 0),\n//             \"Assert equals returns true for two 0 numbers\");\n//         test.assertTrue(Obj.equals(null, null),\n//             \"Assert equals returns true for two null values\");\n//         test.assertTrue(Obj.equals(undefined, undefined),\n//             \"Assert equals returns true for two undefined values\");\n//         test.assertTrue(Obj.equals(this.testObject1, this.testObject1),\n//             \"Assert two of the same Obj instance are equal\");\n//         test.assertTrue(Obj.equals(new String(\"abc123\"), \"abc123\"),\n//             \"Assert equals returns true for a string object and string literal that are the same string\");\n//         test.assertTrue(Obj.equals(new Number(123), 123),\n//             \"Assert equals returns true for number object and number literal that are the same number\");\n//         test.assertTrue(Obj.equals(new Number(123), new Number(123)),\n//             \"Assert equals returns true for two number objects that are the same number\");\n//         test.assertTrue(Obj.equals(new Boolean(true), new Boolean(true)),\n//             \"Assert equals returns true for two Boolean objects that are the same value\");\n//         test.assertTrue(Obj.equals(new Date(time), new Date(time)),\n//             \"Assert equals returns true for two Dates that are the same time\");\n//         test.assertFalse(Obj.equals(this.testObject1, this.testObject2),\n//             \"Assert two different Obj instances are not equal\");\n//     }\n// };\n//\n// /**\n//  * This tests\n//  * 1) The static clone method of the Obj class\n//  * 2) Cloning an Obj (shallow)\n//  */\n// var objCloneObjShallowTest = {\n//\n//     // Setup Test\n//     //-------------------------------------------------------------------------------\n//\n//     setup: function() {\n//         this.testObj        = new Obj();\n//         this.testSubObject  = {};\n//         this.testObj.someValue =  \"testValue\";\n//         this.testObj.subObject = this.testSubObject;\n//     },\n//\n//\n//     // Run Test\n//     //-------------------------------------------------------------------------------\n//\n//     test: function(test) {\n//         var cloneObj = Obj.clone(this.testObj);\n//         test.assertNotEqual(cloneObj, this.testObj,\n//             \"Assert that the clone Obj does not equal the original Obj\");\n//         test.assertEqual(cloneObj.testValue, this.testObj.testValue,\n//             \"Assert that testValue was copied to the Obj clone\");\n//         test.assertTrue(Class.doesExtend(cloneObj, Obj),\n//             \"Assert that cloneObj is an instance of Obj\");\n//         test.assertEqual(cloneObj.subObject, this.testSubObject,\n//             \"Assert that the subObject has not been cloned\");\n//     }\n// };\n//\n// /**\n//  * This tests\n//  * 1) The static clone method of the Obj class\n//  * 2) Cloning an object literal (shallow)\n//  */\n// var objCloneObjectLiteralShallowTest = {\n//\n//     // Setup Test\n//     //-------------------------------------------------------------------------------\n//\n//     setup: function() {\n//         this.testValue      = \"testValue\";\n//         this.testSubArray   = [];\n//         this.genericObject  = {\n//             testValue: this.testValue,\n//             subArray: this.testSubArray\n//         };\n//     },\n//\n//\n//     // Run Test\n//     //-------------------------------------------------------------------------------\n//\n//     test: function(test) {\n//         var cloneGenericObject = Obj.clone(this.genericObject);\n//         test.assertNotEqual(cloneGenericObject, this.genericObject,\n//             \"Assert the cloned generic object and the original generic object are not equal.\");\n//         test.assertEqual(cloneGenericObject.testValue, this.testValue,\n//             \"Assert the values were copied from the original generic object to the cloned generic object\");\n//         test.assertEqual(cloneGenericObject.subArray, this.testSubArray,\n//             \"Assert the subArray has not been cloned\");\n//     }\n// };\n//\n// /**\n//  * This tests\n//  * 1) The static clone method of the Obj class\n//  * 2) Cloning a Date\n//  */\n// var objCloneDateTest = {\n//\n//     // Setup Test\n//     //-------------------------------------------------------------------------------\n//\n//     setup: function() {\n//         this.testDate = new Date(1);\n//     },\n//\n//\n//     // Run Test\n//     //-------------------------------------------------------------------------------\n//\n//     test: function(test) {\n//         var cloneDateObject = Obj.clone(this.testDate);\n//         test.assertTrue(Class.doesExtend(cloneDateObject, Date),\n//             \"Assert that the clone is an instance of Date\");\n//         test.assertTrue(cloneDateObject !== this.testDate,\n//             \"Assert that the Date instances are not equal\");\n//         test.assertEqual(cloneDateObject, this.testDate,\n//             \"Assert that the Date values are equal\");\n//     }\n// };\n//\n// /**\n//  * This tests\n//  * 1) The static clone method of the Obj class\n//  * 2) Values that should be passed through\n//  */\n// var objClonePassThroughTest = {\n//\n//     // Setup Test\n//     //-------------------------------------------------------------------------------\n//\n//     setup: function() {\n//         this.valuesThatPassThrough = [\n//             \"\",\n//             \"string\",\n//             0,\n//             0.123,\n//             123,\n//             true,\n//             false,\n//             new String(\"another string\"),\n//             new Date(0)\n//         ]\n//     },\n//\n//\n//     // Run Test\n//     //-------------------------------------------------------------------------------\n//\n//     test: function(test) {\n//         this.valuesThatPassThrough.forEach(function(passThroughValue) {\n//             var valueClone = Obj.clone(passThroughValue);\n//             test.assertEqual(valueClone, passThroughValue,\n//                 \"Assert value \" + passThroughValue + \" passed through the clone function and simply returned the \" +\n//                     \"original value\");\n//         })\n//     }\n// };\n//\n// var objEnsureInternalIdTest = {\n//\n//     // Setup Test\n//     //-------------------------------------------------------------------------------\n//\n//     setup: function(test) {\n//         var _this = this;\n//\n//         this.NewClass = Class.extend(Obj, {\n//             _constructor: function() {\n//\n//                 IdGenerator.ensureId(this);\n//                 this._super();\n//             }\n//         });\n//\n//         this.testFunction = function() {\n//             new _this.NewClass();\n//         }\n//     },\n//\n//     // Run Test\n//     //-------------------------------------------------------------------------------\n//\n//     test: function(test) {\n//         test.assertNotThrows(this.testFunction,\n//             \"Assert no error is thrown when the _internalId has already been set\");\n//     }\n// };\n"],"sourceRoot":"/source/"}