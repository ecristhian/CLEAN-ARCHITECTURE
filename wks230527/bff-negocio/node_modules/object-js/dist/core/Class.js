'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //-------------------------------------------------------------------------------
// Imports
//-------------------------------------------------------------------------------

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//-------------------------------------------------------------------------------
// Class
//-------------------------------------------------------------------------------

/**
 * @class
 * @template {T}
 */

var Class = function () {

  //-------------------------------------------------------------------------------
  // Constructor
  //-------------------------------------------------------------------------------

  /**
   * @constructs T
   * @param {function(new:T)} constructor
   * @param {Array.<Interface>} interfaces
   * @param {string} name
   * @param {Class} superclass
   * @template {T}
   */

  function Class(constructor, interfaces, name, superclass) {
    _classCallCheck(this, Class);

    /**
     * @private
     * @type {function(new:T)}
     */
    this.constructor = constructor;

    /**
     * @private
     * @type {Array.<Interface>}
     */
    this.interfaces = interfaces;

    /**
     * @private
     * @type {string}
     */
    this.name = name || '';

    /**
     * @private
     * @type {Class}
     */
    this.superclass = superclass || null;
  }

  //-------------------------------------------------------------------------------
  // Getters and Setters
  //-------------------------------------------------------------------------------

  /**
   * @return {function(new:T)}
   */


  _createClass(Class, [{
    key: 'getConstructor',
    value: function getConstructor() {
      return this.constructor;
    }

    /**
     * @return {Array<Interface>}
     */

  }, {
    key: 'getInterfaces',
    value: function getInterfaces() {
      return this.interfaces;
    }

    /**
     * @return {string}
     */

  }, {
    key: 'getName',
    value: function getName() {
      return this.name;
    }

    /**
     * @return {Class}
     */

  }, {
    key: 'getSuperclass',
    value: function getSuperclass() {
      return this.superclass;
    }

    //-------------------------------------------------------------------------------
    // Public Methods
    //-------------------------------------------------------------------------------

    /**
     * @param {Array<*>=} args
     * @return {T}
     */

  }, {
    key: 'apply',
    value: function apply(args) {
      return this.newInstanceWithArray(args);
    }

    /**
     * @param {...*} args
     * @return {T}
     */

  }, {
    key: 'call',
    value: function call() {
      return this.newInstanceWithArray(arguments);
    }

    /**
     * @param {...*} args
     * @return {T}
     */

  }, {
    key: 'newInstance',
    value: function newInstance() {
      var constructor = this.getConstructor();
      return constructor.newInstanceWithArray(arguments);
    }

    /**
     * @param {Array<*>=} args
     * @return {T}
     */

  }, {
    key: 'newInstanceWithArray',
    value: function newInstanceWithArray(args) {
      var constructor = this.getConstructor();
      return constructor.newInstanceWithArray(args);
    }

    //-------------------------------------------------------------------------------
    // Public Static Methods
    //-------------------------------------------------------------------------------

    /**
     * @static
     * @param {*} value
     * @returns {Class.<T>}
     * @template {T}
     */

  }], [{
    key: 'get',
    value: function get(value) {
      var _class = null;
      var constructor = null;
      var prototype = null;
      var superclass = null;
      if (_lodash2.default.isFunction(value)) {
        constructor = value;
        prototype = constructor.prototype;
      } else {
        prototype = Object.getPrototypeOf(value);
        constructor = prototype.constructor;
      }
      _class = Class.constructorToClassMap.get(constructor);
      if (!_class) {
        var superPrototype = Object.getPrototypeOf(prototype);
        if (superPrototype) {
          superclass = Class.get(_lodash2.default.get(superPrototype, 'constructor'));
        }
        _class = new Class(constructor, [], prototype._name || constructor.name, superclass);
        Class.constructorToClassMap.set(constructor, _class);
      }
      return _class;
    }

    //-------------------------------------------------------------------------------
    // Private Static Methods
    //-------------------------------------------------------------------------------

    /**
     * @private
     * @static
     * @type {WeakMap<function(new:T), Class<T>>}
     * @template {T}
     */

  }]);

  return Class;
}();

Class.constructorToClassMap = new WeakMap();
exports.default = Class;
//# sourceMappingURL=Class.js.map
