{"version":3,"sources":["core/Class.js"],"names":[],"mappings":";;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;IAWqB,K;;;;;;;;;;;;;;;AAcnB,iBAAY,WAAZ,EAAyB,UAAzB,EAAqC,IAArC,EAA2C,UAA3C,EAAuD;AAAA;;;;;;AAMrD,SAAK,WAAL,GAAmB,WAAnB;;;;;;AAMA,SAAK,UAAL,GAAkB,UAAlB;;;;;;AAMA,SAAK,IAAL,GAAY,QAAQ,EAApB;;;;;;AAMA,SAAK,UAAL,GAAkB,cAAc,IAAhC;AACD;;;;;;;;;;;;;qCAUgB;AACf,aAAO,KAAK,WAAZ;AACD;;;;;;;;oCAKe;AACd,aAAO,KAAK,UAAZ;AACD;;;;;;;;8BAKS;AACR,aAAO,KAAK,IAAZ;AACD;;;;;;;;oCAKe;AACd,aAAO,KAAK,UAAZ;AACD;;;;;;;;;;;;;0BAWK,I,EAAM;AACV,aAAO,KAAK,oBAAL,CAA0B,IAA1B,CAAP;AACD;;;;;;;;;2BAMM;AACL,aAAO,KAAK,oBAAL,CAA0B,SAA1B,CAAP;AACD;;;;;;;;;kCAMa;AACZ,UAAM,cAAc,KAAK,cAAL,EAApB;AACA,aAAO,YAAY,oBAAZ,CAAiC,SAAjC,CAAP;AACD;;;;;;;;;yCAMoB,I,EAAM;AACzB,UAAM,cAAc,KAAK,cAAL,EAApB;AACA,aAAO,YAAY,oBAAZ,CAAiC,IAAjC,CAAP;AACD;;;;;;;;;;;;;;;wBAaU,K,EAAO;AAChB,UAAI,SAAS,IAAb;AACA,UAAI,cAAc,IAAlB;AACA,UAAI,YAAY,IAAhB;AACA,UAAI,aAAa,IAAjB;AACA,UAAI,iBAAE,UAAF,CAAa,KAAb,CAAJ,EAAyB;AACvB,sBAAc,KAAd;AACA,oBAAY,YAAY,SAAxB;AACD,OAHD,MAGO;AACL,oBAAY,OAAO,cAAP,CAAsB,KAAtB,CAAZ;AACA,sBAAc,UAAU,WAAxB;AACD;AACD,eAAS,MAAM,qBAAN,CAA4B,GAA5B,CAAgC,WAAhC,CAAT;AACA,UAAI,CAAC,MAAL,EAAa;AACX,YAAM,iBAAiB,OAAO,cAAP,CAAsB,SAAtB,CAAvB;AACA,YAAI,cAAJ,EAAoB;AAClB,uBAAa,MAAM,GAAN,CAAU,iBAAE,GAAF,CAAM,cAAN,EAAsB,aAAtB,CAAV,CAAb;AACD;AACD,iBAAS,IAAI,KAAJ,CAAU,WAAV,EAAuB,EAAvB,EAA2B,UAAU,KAAV,IAAmB,YAAY,IAA1D,EAAgE,UAAhE,CAAT;AACA,cAAM,qBAAN,CAA4B,GAA5B,CAAgC,WAAhC,EAA6C,MAA7C;AACD;AACD,aAAO,MAAP;AACD;;;;;;;;;;;;;;;;;;AAlJkB,K,CAgKZ,qB,GAAwB,IAAI,OAAJ,E;kBAhKZ,K","file":"core/Class.js","sourcesContent":["//-------------------------------------------------------------------------------\n// Imports\n//-------------------------------------------------------------------------------\n\nimport _ from 'lodash';\n\n\n//-------------------------------------------------------------------------------\n// Class\n//-------------------------------------------------------------------------------\n\n/**\n * @class\n * @template {T}\n */\nexport default class Class {\n\n  //-------------------------------------------------------------------------------\n  // Constructor\n  //-------------------------------------------------------------------------------\n\n  /**\n   * @constructs T\n   * @param {function(new:T)} constructor\n   * @param {Array.<Interface>} interfaces\n   * @param {string} name\n   * @param {Class} superclass\n   * @template {T}\n   */\n  constructor(constructor, interfaces, name, superclass) {\n\n    /**\n     * @private\n     * @type {function(new:T)}\n     */\n    this.constructor = constructor;\n\n    /**\n     * @private\n     * @type {Array.<Interface>}\n     */\n    this.interfaces = interfaces;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.name = name || '';\n\n    /**\n     * @private\n     * @type {Class}\n     */\n    this.superclass = superclass || null;\n  }\n\n\n  //-------------------------------------------------------------------------------\n  // Getters and Setters\n  //-------------------------------------------------------------------------------\n\n  /**\n   * @return {function(new:T)}\n   */\n  getConstructor() {\n    return this.constructor;\n  }\n\n  /**\n   * @return {Array<Interface>}\n   */\n  getInterfaces() {\n    return this.interfaces;\n  }\n\n  /**\n   * @return {string}\n   */\n  getName() {\n    return this.name;\n  }\n\n  /**\n   * @return {Class}\n   */\n  getSuperclass() {\n    return this.superclass;\n  }\n\n\n  //-------------------------------------------------------------------------------\n  // Public Methods\n  //-------------------------------------------------------------------------------\n\n  /**\n   * @param {Array<*>=} args\n   * @return {T}\n   */\n  apply(args) {\n    return this.newInstanceWithArray(args);\n  }\n\n  /**\n   * @param {...*} args\n   * @return {T}\n   */\n  call() {\n    return this.newInstanceWithArray(arguments);\n  }\n\n  /**\n   * @param {...*} args\n   * @return {T}\n   */\n  newInstance() {\n    const constructor = this.getConstructor();\n    return constructor.newInstanceWithArray(arguments);\n  }\n\n  /**\n   * @param {Array<*>=} args\n   * @return {T}\n   */\n  newInstanceWithArray(args) {\n    const constructor = this.getConstructor();\n    return constructor.newInstanceWithArray(args);\n  }\n\n\n  //-------------------------------------------------------------------------------\n  // Public Static Methods\n  //-------------------------------------------------------------------------------\n\n  /**\n   * @static\n   * @param {*} value\n   * @returns {Class.<T>}\n   * @template {T}\n   */\n  static get(value) {\n    let _class = null;\n    let constructor = null;\n    let prototype = null;\n    let superclass = null;\n    if (_.isFunction(value)) {\n      constructor = value;\n      prototype = constructor.prototype;\n    } else {\n      prototype = Object.getPrototypeOf(value);\n      constructor = prototype.constructor;\n    }\n    _class = Class.constructorToClassMap.get(constructor);\n    if (!_class) {\n      const superPrototype = Object.getPrototypeOf(prototype);\n      if (superPrototype) {\n        superclass = Class.get(_.get(superPrototype, 'constructor'));\n      }\n      _class = new Class(constructor, [], prototype._name || constructor.name, superclass);\n      Class.constructorToClassMap.set(constructor, _class);\n    }\n    return _class;\n  }\n\n\n\n  //-------------------------------------------------------------------------------\n  // Private Static Methods\n  //-------------------------------------------------------------------------------\n\n  /**\n   * @private\n   * @static\n   * @type {WeakMap<function(new:T), Class<T>>}\n   * @template {T}\n   */\n  static constructorToClassMap = new WeakMap();\n}\n"],"sourceRoot":"/source/"}