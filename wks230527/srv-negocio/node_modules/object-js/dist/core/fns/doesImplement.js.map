{"version":3,"sources":["core/fns/doesImplement.js"],"names":[],"mappings":";;;;;kBAiBwB,a;;AAbxB;;;;AACA;;;;;;;;;;;;;;;;;;;AAYe,SAAS,aAAT,CAAuB,KAAvB,EAA8B,aAA9B,EAA6C;AAC1D,MAAI,iBAAE,QAAF,CAAW,KAAX,CAAJ,EAAuB;AACrB,QAAI,SAAS,gBAAM,GAAN,CAAU,KAAV,CAAb;AACA,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAO,MAAP,EAAe;AACb,aAAK,IAAI,IAAI,CAAR,EAAW,OAAO,OAAO,aAAP,GAAuB,MAA9C,EAAsD,IAAI,IAA1D,EAAgE,GAAhE,EAAqE;AACnE,cAAM,yBAAyB,OAAO,aAAP,GAAuB,CAAvB,EAA0B,gBAA1B,EAA/B;AACA,cAAM,wBAAwB,IAAI,sBAAJ,EAA9B;;;AAGA,cAAI,iCAAiC,aAArC,EAAoD;AAClD,mBAAO,IAAP;AACD;AACF;AACD,iBAAS,OAAO,aAAP,EAAT;AACD;AACF,KAbD,MAaO;AACL,UAAM,UAAU,IAAI,aAAJ,EAAhB;AACA,UAAI,SAAS,IAAb;AACA,uBAAE,KAAF,CAAQ,OAAR,EAAiB,UAAC,MAAD,EAAS,IAAT,EAAkB;AACjC,YAAI,CAAC,iBAAE,UAAF,CAAa,MAAM,IAAN,CAAb,CAAL,EAAgC;AAC9B,mBAAS,KAAT;AACA,iBAAO,KAAP;AACD;AACF,OALD;AAMA,aAAO,MAAP;AACD;AACF;AACD,SAAO,KAAP;AACD","file":"core/fns/doesImplement.js","sourcesContent":["//-------------------------------------------------------------------------------\n// Imports\n//-------------------------------------------------------------------------------\n\nimport _ from 'lodash';\nimport Class from '../Class';\n\n\n//-------------------------------------------------------------------------------\n// Function\n//-------------------------------------------------------------------------------\n\n/**\n * @param {*} value\n * @param {function(new:Implementable)} implementable\n * @return {boolean}\n */\nexport default function doesImplement(value, implementable) {\n  if (_.isObject(value)) {\n    let _class = Class.get(value);\n    if (_class.name !== 'Object') {\n      while (_class) {\n        for (let i = 0, size = _class.getInterfaces().length; i < size; i++) {\n          const interfaceImplementable = _class.getInterfaces()[i].getImplementable();\n          const implementableInstance = new interfaceImplementable();\n\n          //NOTE BRN: This both checks for top level interfaces as well as super interfaces\n          if (implementableInstance instanceof implementable) {\n            return true;\n          }\n        }\n        _class = _class.getSuperclass();\n      }\n    } else {\n      const methods = new implementable();\n      let result = true;\n      _.forIn(methods, (method, name) => {\n        if (!_.isFunction(value[name])) {\n          result = false;\n          return false;\n        }\n      });\n      return result;\n    }\n  }\n  return false;\n}\n"],"sourceRoot":"/source/"}