'use strict';

var _chai = require('chai');

var _doesImplement = require('../doesImplement');

var _doesImplement2 = _interopRequireDefault(_doesImplement);

var _Interface = require('../../Interface');

var _Interface2 = _interopRequireDefault(_Interface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('doesImplement', function () {
  describe('Plain Object', function () {
    it('returns true for plain object that implements interface methods', function () {
      var testObject = {
        a: function a() {}
      };
      var TestInterface = _Interface2.default.declare({
        a: function a() {}
      });
      (0, _chai.expect)((0, _doesImplement2.default)(testObject, TestInterface)).to.be.true;
    });
    it('returns false for a plain object the does NOT implement interface methods', function () {
      var testObject = {};
      var TestInterface = _Interface2.default.declare({
        a: function a() {}
      });
      (0, _chai.expect)((0, _doesImplement2.default)(testObject, TestInterface)).to.be.false;
    });
    it('returns true for a plain object the does implements child and parent interface methods', function () {
      var testObject = {
        a: function a() {},
        b: function b() {}
      };
      var TestAInterface = _Interface2.default.declare({
        a: function a() {}
      });
      var TestBInterface = _Interface2.default.extend(TestAInterface, {
        b: function b() {}
      });
      (0, _chai.expect)((0, _doesImplement2.default)(testObject, TestBInterface)).to.be.true;
    });
    it('returns false for a plain object the does not implement child interface methods but does implement parent methods', function () {
      var testObject = {
        a: function a() {}
      };
      var TestAInterface = _Interface2.default.declare({
        a: function a() {}
      });
      var TestBInterface = _Interface2.default.extend(TestAInterface, {
        b: function b() {}
      });
      (0, _chai.expect)((0, _doesImplement2.default)(testObject, TestBInterface)).to.be.false;
    });
    it('returns false for a plain object the does implement child interface methods but does NOT implement parent methods', function () {
      var testObject = {
        b: function b() {}
      };
      var TestAInterface = _Interface2.default.declare({
        a: function a() {}
      });
      var TestBInterface = _Interface2.default.extend(TestAInterface, {
        b: function b() {}
      });
      (0, _chai.expect)((0, _doesImplement2.default)(testObject, TestBInterface)).to.be.false;
    });
  });
});
//# sourceMappingURL=doesImplement-test.js.map
