{"version":3,"sources":["core/fns/implement.js"],"names":[],"mappings":";;;;;kBAkBwB,S;;AAdxB;;;;AACA;;;;AACA;;;;;;;;;;;;;;;AAYe,SAAS,SAAT,CAAmB,WAAnB,EAAgC,aAAhC,EAA+C;AAC5D,MAAM,SAAS,gBAAM,GAAN,CAAU,WAAV,CAAf;AACA,MAAI,6BAAc,WAAd,EAA2B,aAA3B,CAAJ,EAA+C;AAC7C,UAAM,IAAI,KAAJ,kBAAwB,cAAc,OAAd,EAAxB,+DACS,OAAO,OAAP,EADT,QAAN;AAED;AACD,OAAK,IAAM,UAAX,IAAyB,cAAc,SAAvC,EAAkD;AAChD,QAAI,CAAC,iBAAE,UAAF,CAAa,YAAY,SAAZ,CAAsB,UAAtB,CAAb,CAAL,EAAsD;AACpD,YAAM,IAAI,KAAJ,cAAoB,OAAO,OAAP,EAApB,iDACF,UADE,0BAC2B,cAAc,YAAd,GAA6B,OAA7B,EAD3B,QAAN;AAED;AACF;AACD,SAAO,aAAP,GAAuB,IAAvB,CAA4B,cAAc,YAAd,EAA5B;AACD,C","file":"core/fns/implement.js","sourcesContent":["//-------------------------------------------------------------------------------\n// Imports\n//-------------------------------------------------------------------------------\n\nimport _ from 'lodash';\nimport Class from '../Class';\nimport doesImplement from './doesImplement';\n\n\n//-------------------------------------------------------------------------------\n// Function\n//-------------------------------------------------------------------------------\n\n/**\n * @param {function(new:T)} constructor\n * @param {function(new:Implementable)} implementable\n * @template {T}\n */\nexport default function implement(constructor, implementable) {\n  const _class = Class.get(constructor);\n  if (doesImplement(constructor, implementable)) {\n    throw new Error(`Interface '${implementable.getName()}' has already been implemented by \n      the class '${_class.getName()}'`);\n  }\n  for (const methodName in implementable.prototype) {\n    if (!_.isFunction(constructor.prototype[methodName])) {\n      throw new Error(`Class '${_class.getName()}' does not implement method '\n        ${methodName}' of interface '${implementable.getInterface().getName()}'`);\n    }\n  }\n  _class.getInterfaces().push(implementable.getInterface());\n}\n"],"sourceRoot":"/source/"}