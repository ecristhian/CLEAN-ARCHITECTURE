'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //-------------------------------------------------------------------------------
// Imports
//-------------------------------------------------------------------------------

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Implementable = require('./Implementable');

var _Implementable2 = _interopRequireDefault(_Implementable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//-------------------------------------------------------------------------------
// Class
//-------------------------------------------------------------------------------

/**
 * @class
 * @template {T extends Implementable}
 */

var Interface = function () {

  //-------------------------------------------------------------------------------
  // Constructor
  //-------------------------------------------------------------------------------

  /**
   * @constructs
   * @param {function(new:Implementable)} implementable
   * @param {string} name
   * @param {Interface=} superinterface
   */

  function Interface(implementable, name, superinterface) {
    _classCallCheck(this, Interface);

    /**
     * @private
     * @type {function(new:Implementable)}
     */
    this.implementable = implementable;

    /**
     * @private
     * @type {string}
     */
    this.name = name;

    /**
     * @private
     * @type {Interface}
     */
    this.superinterface = superinterface;
  }

  //-------------------------------------------------------------------------------
  // Getters and Setters
  //-------------------------------------------------------------------------------

  /**
   * @return {function(new:Implementable)}
   */


  _createClass(Interface, [{
    key: 'getImplementable',
    value: function getImplementable() {
      return this.implementable;
    }

    /**
     * @return {string}
     */

  }, {
    key: 'getName',
    value: function getName() {
      return this.name;
    }

    /**
     * @return {Interface}
     */

  }, {
    key: 'getSuperinterface',
    value: function getSuperinterface() {
      return this.superinterface;
    }

    //-------------------------------------------------------------------------------
    // Public Static Methods
    //-------------------------------------------------------------------------------

    /**
     * @static
     * @param {Object.<string, function(..):*>} declaration
     * @return {function(new:Implementable)}
     */

  }], [{
    key: 'declare',
    value: function declare(declaration) {
      return Interface.extend(_Implementable2.default, declaration);
    }

    /**
     * @static
     * @param {function(new:Implementable)} implementable
     * @param {Object.<string, function(..):*>} declaration
     * @return {function(new:Implementable)}
     */

  }, {
    key: 'extend',
    value: function extend(implementable, declaration) {
      if (!_lodash2.default.isFunction(implementable)) {
        throw new Error('implementable must be a function');
      }
      var prototype = new implementable();
      var interfaceName = declaration['_name'] || implementable.name;
      delete declaration['_name'];
      for (var name in declaration) {
        if (Object.prototype.hasOwnProperty.call(declaration, name)) {
          if (_lodash2.default.isFunction(declaration[name])) {
            prototype[name] = declaration[name];
          } else {
            throw new Error('Interface can only declare functions');
          }
        }
      }
      var newImplementable = function newImplementable() {};
      newImplementable.prototype = prototype;
      newImplementable.constructor = newImplementable;
      _lodash2.default.assign(newImplementable, {
        getInterface: function getInterface() {
          return newImplementable._interface;
        }
      });
      var newInterface = new Interface(newImplementable, interfaceName, implementable.getInterface());
      Object.defineProperty(newImplementable, '_interface', {
        value: newInterface,
        writable: false,
        enumerable: false,
        configurable: false
      });
      Interface.implementableToInterfaceMap.set(newImplementable, newInterface);
      return newImplementable;
    }

    /**
     * @static
     * @param {function(new:T)} implementable
     * @return {Interface<T>}
     * @template {T}
     */

  }, {
    key: 'get',
    value: function get(implementable) {
      return Interface.implementableToInterfaceMap.get(implementable);
    }

    //-------------------------------------------------------------------------------
    // Private Static Methods
    //-------------------------------------------------------------------------------

    /**
     * @private
     * @static
     * @type {WeakMap<function(new:T), Interface<T>>}
     * @template {T}
     */

  }]);

  return Interface;
}();

Interface.implementableToInterfaceMap = new WeakMap();
exports.default = Interface;
//# sourceMappingURL=Interface.js.map
