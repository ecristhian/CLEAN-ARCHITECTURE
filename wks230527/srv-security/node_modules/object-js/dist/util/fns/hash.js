'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hash;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ensureId = require('./ensureId');

var _ensureId2 = _interopRequireDefault(_ensureId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//-------------------------------------------------------------------------------
// Function
//-------------------------------------------------------------------------------

/**
 * @param {*} value
 * @return {number}
 */
//-------------------------------------------------------------------------------
// Imports
//-------------------------------------------------------------------------------

function hash(value) {
  var key = '';
  if (_lodash2.default.isArguments(value)) {
    (0, _ensureId2.default)(value);
    key += 'ar_' + value._internalId;
  } else if (_lodash2.default.isArray(value)) {
    (0, _ensureId2.default)(value);
    key += 'a_' + value._internalId;
  } else if (_lodash2.default.isBoolean(value)) {
    key += 'b_' + value;
  } else if (_lodash2.default.isDate(value)) {

    // TODO BRN: Dates are not immutable. Therefore we can run in to issues here if a Date is stored as
    // a key and then is changed later. We should rethink this and perhaps implement our own immutable
    // Date class.

    key += 'd_' + value;
  } else if (_lodash2.default.isError(value)) {
    (0, _ensureId2.default)(value);
    key += 'e_' + value._internalId;
  } else if (_lodash2.default.isFunction(value)) {
    (0, _ensureId2.default)(value);
    key += 'f_' + value._internalId;
  } else if (_lodash2.default.isNumber(value)) {
    key += 'n_' + value;
  } else if (_lodash2.default.isNaN(value)) {
    key += 'nan';
  } else if (_lodash2.default.isNull(value)) {
    key += 'null';
  } else if (_lodash2.default.isRegExp(value)) {
    (0, _ensureId2.default)(value);
    key += 'r_' + value._internalId;
  } else if (_lodash2.default.isSymbol(value)) {
    key += 'sy_' + value.toString();
  } else if (_lodash2.default.isString(value)) {
    key += 's_' + value;
  } else if (_lodash2.default.isUndefined(value)) {
    key += 'undefined';
  } else if (_lodash2.default.isObject(value)) {
    (0, _ensureId2.default)(value);
    key += 'o_' + value._internalId;
  } else {
    throw new Error('Unrecognized type to hash: ' + value);
  }

  var result = 0;
  if (key.length === 0) {
    return result;
  }
  for (var i = 0, size = key.length; i < size; i++) {
    var charCode = key.charCodeAt(i);
    result = (result << 5) - result + charCode;
    result = result & result; // Convert to 32bit integer
  }
  return result;
}
//# sourceMappingURL=hash.js.map
