{"version":3,"sources":["core/fns/__tests__/doesImplement-test.js"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAGA,SAAS,eAAT,EAA0B,YAAW;AACnC,WAAS,cAAT,EAAyB,YAAW;AAClC,OAAG,iEAAH,EAAsE,YAAW;AAC/E,UAAM,aAAa;AACjB,WAAG,aAAW,CAAE;AADC,OAAnB;AAGA,UAAM,gBAAgB,oBAAU,OAAV,CAAkB;AACtC,WAAG,aAAW,CAAE;AADsB,OAAlB,CAAtB;AAGA,wBAAO,6BAAc,UAAd,EAA0B,aAA1B,CAAP,EAAiD,EAAjD,CAAoD,EAApD,CAAuD,IAAvD;AACD,KARD;AASA,OAAG,2EAAH,EAAgF,YAAW;AACzF,UAAM,aAAa,EAAnB;AACA,UAAM,gBAAgB,oBAAU,OAAV,CAAkB;AACtC,WAAG,aAAW,CAAE;AADsB,OAAlB,CAAtB;AAGA,wBAAO,6BAAc,UAAd,EAA0B,aAA1B,CAAP,EAAiD,EAAjD,CAAoD,EAApD,CAAuD,KAAvD;AACD,KAND;AAOA,OAAG,wFAAH,EAA6F,YAAW;AACtG,UAAM,aAAa;AACjB,WAAG,aAAW,CAAE,CADC;AAEjB,WAAG,aAAW,CAAE;AAFC,OAAnB;AAIA,UAAM,iBAAiB,oBAAU,OAAV,CAAkB;AACvC,WAAG,aAAW,CAAE;AADuB,OAAlB,CAAvB;AAGA,UAAM,iBAAiB,oBAAU,MAAV,CAAiB,cAAjB,EAAiC;AACtD,WAAG,aAAW,CAAE;AADsC,OAAjC,CAAvB;AAGA,wBAAO,6BAAc,UAAd,EAA0B,cAA1B,CAAP,EAAkD,EAAlD,CAAqD,EAArD,CAAwD,IAAxD;AACD,KAZD;AAaA,OAAG,mHAAH,EAAwH,YAAW;AACjI,UAAM,aAAa;AACjB,WAAG,aAAW,CAAE;AADC,OAAnB;AAGA,UAAM,iBAAiB,oBAAU,OAAV,CAAkB;AACvC,WAAG,aAAW,CAAE;AADuB,OAAlB,CAAvB;AAGA,UAAM,iBAAiB,oBAAU,MAAV,CAAiB,cAAjB,EAAiC;AACtD,WAAG,aAAW,CAAE;AADsC,OAAjC,CAAvB;AAGA,wBAAO,6BAAc,UAAd,EAA0B,cAA1B,CAAP,EAAkD,EAAlD,CAAqD,EAArD,CAAwD,KAAxD;AACD,KAXD;AAYA,OAAG,mHAAH,EAAwH,YAAW;AACjI,UAAM,aAAa;AACjB,WAAG,aAAW,CAAE;AADC,OAAnB;AAGA,UAAM,iBAAiB,oBAAU,OAAV,CAAkB;AACvC,WAAG,aAAW,CAAE;AADuB,OAAlB,CAAvB;AAGA,UAAM,iBAAiB,oBAAU,MAAV,CAAiB,cAAjB,EAAiC;AACtD,WAAG,aAAW,CAAE;AADsC,OAAjC,CAAvB;AAGA,wBAAO,6BAAc,UAAd,EAA0B,cAA1B,CAAP,EAAkD,EAAlD,CAAqD,EAArD,CAAwD,KAAxD;AACD,KAXD;AAYD,GAtDD;AAuDD,CAxDD","file":"core/fns/__tests__/doesImplement-test.js","sourcesContent":["import { expect } from 'chai';\nimport doesImplement from '../doesImplement';\nimport Interface from '../../Interface';\n\n\ndescribe('doesImplement', function() {\n  describe('Plain Object', function() {\n    it('returns true for plain object that implements interface methods', function() {\n      const testObject = {\n        a: function() {}\n      };\n      const TestInterface = Interface.declare({\n        a: function() {}\n      });\n      expect(doesImplement(testObject, TestInterface)).to.be.true;\n    });\n    it('returns false for a plain object the does NOT implement interface methods', function() {\n      const testObject = {};\n      const TestInterface = Interface.declare({\n        a: function() {}\n      });\n      expect(doesImplement(testObject, TestInterface)).to.be.false;\n    });\n    it('returns true for a plain object the does implements child and parent interface methods', function() {\n      const testObject = {\n        a: function() {},\n        b: function() {}\n      };\n      const TestAInterface = Interface.declare({\n        a: function() {}\n      });\n      const TestBInterface = Interface.extend(TestAInterface, {\n        b: function() {}\n      });\n      expect(doesImplement(testObject, TestBInterface)).to.be.true;\n    });\n    it('returns false for a plain object the does not implement child interface methods but does implement parent methods', function() {\n      const testObject = {\n        a: function() {}\n      };\n      const TestAInterface = Interface.declare({\n        a: function() {}\n      });\n      const TestBInterface = Interface.extend(TestAInterface, {\n        b: function() {}\n      });\n      expect(doesImplement(testObject, TestBInterface)).to.be.false;\n    });\n    it('returns false for a plain object the does implement child interface methods but does NOT implement parent methods', function() {\n      const testObject = {\n        b: function() {}\n      };\n      const TestAInterface = Interface.declare({\n        a: function() {}\n      });\n      const TestBInterface = Interface.extend(TestAInterface, {\n        b: function() {}\n      });\n      expect(doesImplement(testObject, TestBInterface)).to.be.false;\n    });\n  });\n});\n"],"sourceRoot":"/source/"}